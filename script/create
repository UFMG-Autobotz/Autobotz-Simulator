#!/bin/bash

# ============ #

# prepare to print colorful text
export red='\e[0;31m'
export green='\e[0;32m'
export nc='\033[0m'

# save the root of the git repository (used to save errors on the log)
export git_root=$(pwd)

# ============ #

# function to print error messages
# messages are displayed on the terminal on red
# and saved on error.log with timestamp
function err() {
  echo -e "${red}$@${nc}" # on red on stdout
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >> "${git_root}/script/error.log"  # with timestamp on stderr
}

# ============ #

# function to quit if a value is not in an allowance list
# $1=allowed_values $2=allowance_list $3=error_message
function check_value {
  local -n allowed_values=$1
  valid=$(printf "%s\n" "${allowed_values[@]}" | grep -x "${2}" | wc -l)

  if [[ "$valid" == "0" ]] ; then
    err "${3}"
    exit 1
  fi
}

# ============ #

# function to create a world
# $1=project (uppercase) $2=name (snake_case)
function createWorld {
  world_name="${1}_${2}"
  new_file="./worlds/${world_name}.world"
  template="./worlds/TEMPLATE_world.world"

  # check if world already exists
  if [[ -s "${new_file}" ]] ; then
    err "${world_name} world already exists!"
    exit 1
  fi

  # create .world file
  ## replace template to snake_case_name
  sed "s/template/${2}/g" <$template >$new_file

  echo -e "${green}Created world ${world_name}!${nc}"
}

# ============ #

# function to create a model
# $1=project (uppercase) $2=name (snake_case)
function createModel {
  model_name="${1}_${2}"
  new_dir="models/${model_name}/"
  template="models/TEMPLATE_model/"

  # check if model already exists
  if [[ -d "${new_dir}" ]] && [[ ! -L "${new_dir}" ]] ; then
    err "${model_name} model already exists!"
    exit 1
  fi

  # create model directory
  mkdir $new_dir

  # create model.sdf.erb
  ## replace template to snake_case_name
  sed "s/template/${2}/g" <"${template}model.sdf.erb" >"${new_dir}model.sdf.erb"

  # create model.config
  ## replace Template to "UPPERCASEPROJECT - Title Case Name"
  ## Replace {{description}} to "A Title Case Name model for the UPPERCASEPROJECT project."
  title_case_name=$(echo ${2} | sed -r  -e 's:^[a-z]:\U&:' -e 's:_([a-z]|[A-Z]): \U\1:g')
  config_name="${1} - ${title_case_name}"
  config_description="A ${title_case_name} model for the ${1} project."
  sed -e "s/Template/${config_name}/g" \
    -e "s/{{description}}/${config_description}/" \
    <"${template}model.config" >"${new_dir}model.config"

  # apend model.sdf to .gitignore
  echo "${new_dir}/model.sdf" >> ".gitignore"

  echo -e "${green}Created model ${model_name}!${nc}"
}

# ============ #

# function to create a plugin
# $1=project (uppercase) $2=name (snake_case)
function createPlugin {
  plugin_name="${1}_${2}"
  new_dir="./plugins/${plugin_name}/"
  template="./plugins/TEMPLATE_plugin/"

  # check if plugin already exists
  if [[ -d "${new_dir}" ]] && [[ ! -L "${new_dir}" ]] ; then
    err "${plugin_name} plugin already exists!"
    exit 1
  fi

  # create plugin directory
  mkdir $new_dir

  # create CMakeLists.txt
  ## replace template with snake_case_name
  ## replace Template with PascalCaseName
  pascal_case_name=$(echo ${2} | sed -r 's:(_|^)([a-z]|[A-Z]):\U\2:g')
  sed -r -e "s/template/${2}/g" \
    -e "s/Template/${pascal_case_name}/g" \
    <"${template}CMakeLists.txt" >"${new_dir}CMakeLists.txt"

  # create README.md
  ## replace Template with Title Case Name
  ## replace TEMPLATE_plugin with UPPERCASEPROJECT_snake_case_name
  ## replace template_plugin with snake_case_name
  title_case_name=$(echo ${2} | sed -r  -e 's:^[a-z]:\U&:' -e 's:_([a-z]|[A-Z]): \U\1:g')
  sed -r -e "s/Template/${title_case_name}/g" \
    -e "s/TEMPLATE_plugin/${plugin_name}/g" \
    -e "s/template_plugin/${2}/g" \
    <"${template}README.md" >"${new_dir}README.md"

  # create NamePlugin.cc
  ## replace Template with PascalCaseName
  ## replace Example with Title Case Name
  sed -r -e "s/Template/${pascal_case_name}/g" \
    -e "s/Example/${title_case_name}/g" \
    <"${template}TemplatePlugin.cc" >"${new_dir}${pascal_case_name}Plugin.cc"

  # create NamePlugin.hh
  ## replace TEMPLATE with UPPERCASE_WITH_UNDERSCORES_NAME
  ## replace Template with PascalCaseName
  sed -r -e "s/TEMPLATE/${2^^}/g" \
    -e "s/Template/${pascal_case_name}/g" \
    <"${template}TemplatePlugin.hh" >"${new_dir}${pascal_case_name}Plugin.hh"

  echo -e "${green}Created plugin ${plugin_name}!${nc}"
}

# ============ #

# read type of file to be created
type=${1,,}

# ------------ #

# check for errors while reading world
if [[ ! $type ]] || [[ "$type" == "-p" ]] || [[  "$type" == "-n" ]]  ; then
  err "Please choose the type of the file to be created."
  exit 1
fi

# ------------ #

# check for help
if [[ "$type" == "--help" ]]  || [[ "$type" == "-h" ]]; then
  echo -e "script/create - create elements of the Autbotz Simulator"
  echo -e "SINTAXE: script/create type [options]"
  echo -e "Types: world, model and plugin"
  echo -e "Options:"
  echo -e "\t -p: project - VSS, VT, GENERIC or TEST, default is GENERIC"
  echo -e "\t -n: name - string without spaces, required"

  exit 0
fi

# ------------ #

#parse options
project="GENERIC" # default project is GENERIC
name_flag=False
OPTIND=2
while getopts p:n: option; do
  case "${option}" in
    p) project="${OPTARG^^}";;
    n) name="${OPTARG}";;
  esac
done

# ------------ #

# validate project
valid_projects=(GENERIC VT VSS TEST)
check_value valid_projects $project "Invalid project: ${project}!\nProjects available: ${valid_projects[*]}"

# validate name
if [[ ! $name ]] ; then
  err "You must set a ${1,,} name!"
  exit
fi

# ------------ #

# format name
## convert name in camelCase, PascalCase or kebab-case to snake_case
name=$(echo ${name} | sed -r  -e 's:-:_:g' -e 's:_(.):_\l\1:g' -e 's:([A-Z]):_\l\1:g' -e 's:^_::')

# ------------ #

# create element
case "${type}" in
  world) createWorld $project $name;;
  model) createModel $project $name;;
  plugin) createPlugin $project $name;;
esac
